/**
 * Flyo Nitro
 * This document provides a comprehensive overview of all the endpoints available for Flyo Nitro, a powerful platform designed to facilitate the development of websites. Flyo Nitro is built upon three strategic pillars that play a central role in website development:  + Config: The config component is responsible for loading all the necessary elements required for seamless navigation within the website layout. This includes crucial elements like the navigation menu or global content, such as the \"Locations\" section of an entity, which can be utilized in the footer across all pages. + Pages: Pages are evaluated based on their unique slug (path) and encompass all the content needed to populate a specific page. This includes various content elements, known as blocks, as well as meta information like \"og-descriptions.\" Additionally, pages can dynamically incorporate content from entities by employing mapping techniques. + Entity: Entities can be retrieved by utilizing a unique identifier, which can be configured within Flyo Nitro. Each entity provides comprehensive details in the form of fields, offering specific content tailored to a particular context.  Furthermore, it is important to distinguish between the **development** and **production** environments in Flyo Nitro. In the development environment, any changes made to data within the Flyo User Interface are immediately accessible, even without saving. This feature enables users to have a live preview of the changes during data entry. On the other hand, the production environment exclusively utilizes saved data, ensuring that only finalized content is displayed.  For more detailed documentation in German, please visit: dev.flyo.cloud
 *
 * The version of the OpenAPI document: 1.0.0-beta.143
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigResponseContainersValue from './ConfigResponseContainersValue';
import ConfigResponseNitro from './ConfigResponseNitro';

/**
 * The ConfigResponse model module.
 * @module model/ConfigResponse
 * @version 1.0.0-beta.143
 */
class ConfigResponse {
    /**
     * Constructs a new <code>ConfigResponse</code>.
     * @alias module:model/ConfigResponse
     */
    constructor() { 
        
        ConfigResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigResponse} obj Optional instance to populate.
     * @return {module:model/ConfigResponse} The populated <code>ConfigResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigResponse();

            if (data.hasOwnProperty('nitro')) {
                obj['nitro'] = ConfigResponseNitro.constructFromObject(data['nitro']);
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], ['String']);
            }
            if (data.hasOwnProperty('containers')) {
                obj['containers'] = ApiClient.convertToType(data['containers'], {'String': ConfigResponseContainersValue});
            }
            if (data.hasOwnProperty('globals')) {
                obj['globals'] = ApiClient.convertToType(data['globals'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `nitro`
        if (data['nitro']) { // data not null
          ConfigResponseNitro.validateJSON(data['nitro']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pages'])) {
            throw new Error("Expected the field `pages` to be an array in the JSON data but got " + data['pages']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConfigResponseNitro} nitro
 */
ConfigResponse.prototype['nitro'] = undefined;

/**
 * A unique array of slugs is available for the entire site configuration, providing you with the flexibility to register specific routes for your application or compare a slug against this array. This comparison enables you to determine whether to return a \"404 Not Found\" exception or handle the request differently. By utilizing this array, you can easily manage and control the slugs used in your application, ensuring that only valid and registered routes are accessible. This approach helps maintain the integrity and security of your site's navigation, preventing users from accessing undefined or unauthorized pages.
 * @member {Array.<String>} pages
 */
ConfigResponse.prototype['pages'] = undefined;

/**
 * @member {Object.<String, module:model/ConfigResponseContainersValue>} containers
 */
ConfigResponse.prototype['containers'] = undefined;

/**
 * The globals section serves as a crucial component in the overall structure of the code. It consists of an associative array that allows users to define their own unique keys, each of which contains an array of items representing data sourced from a Content Pool. This data is essential as it needs to be accessible throughout the entire scope of the website, ensuring its availability whenever required. By leveraging this globals section, developers can efficiently manage and access these globally significant data sets.
 * @member {Object} globals
 */
ConfigResponse.prototype['globals'] = undefined;






export default ConfigResponse;

