/**
 * Flyo Nitro
 * This document provides a comprehensive overview of all the endpoints available for Flyo Nitro, a powerful platform designed to facilitate the development of websites. Flyo Nitro is built upon three strategic pillars that play a central role in website development:  + Config: The config component is responsible for loading all the necessary elements required for seamless navigation within the website layout. This includes crucial elements like the navigation menu or global content, such as the \"Locations\" section of an entity, which can be utilized in the footer across all pages. + Pages: Pages are evaluated based on their unique slug (path) and encompass all the content needed to populate a specific page. This includes various content elements, known as blocks, as well as meta information like \"og-descriptions.\" Additionally, pages can dynamically incorporate content from entities by employing mapping techniques. + Entity: Entities can be retrieved by utilizing a unique identifier, which can be configured within Flyo Nitro. Each entity provides comprehensive details in the form of fields, offering specific content tailored to a particular context.  Furthermore, it is important to distinguish between the **development** and **production** environments in Flyo Nitro. In the development environment, any changes made to data within the Flyo User Interface are immediately accessible, even without saving. This feature enables users to have a live preview of the changes during data entry. On the other hand, the production environment exclusively utilizes saved data, ensuring that only finalized content is displayed.  For more detailed documentation in German, please visit: dev.flyo.cloud
 *
 * The version of the OpenAPI document: 1.0.0-beta.142
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContainerPageProperty model module.
 * @module model/ContainerPageProperty
 * @version 1.0.0-beta.142
 */
class ContainerPageProperty {
    /**
     * Constructs a new <code>ContainerPageProperty</code>.
     * @alias module:model/ContainerPageProperty
     * @param {(module:model/Boolean|module:model/Number|module:model/Object|module:model/String|module:model/[Object])} instance The actual instance to initialize ContainerPageProperty.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            // validate string
            if (!(typeof instance === 'string')) {
                throw new Error("Invalid value. Must be string. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into String
            errorMessages.push("Failed to construct String: " + err)
        }

        try {
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into Object
            errorMessages.push("Failed to construct Object: " + err)
        }

        try {
            // validate integer
            if (!(typeof instance === 'number' && instance % 1 === 0)) {
                throw new Error("Invalid value. Must be integer. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into Number
            errorMessages.push("Failed to construct Number: " + err)
        }

        try {
            // validate array data type
            if (!Array.isArray(instance)) {
                throw new Error("Invalid data type. Expecting array. Input: " + instance);
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into [Object]
            errorMessages.push("Failed to construct [Object]: " + err)
        }

        try {
            // validate boolean
            if (!(typeof instance === 'boolean')) {
                throw new Error("Invalid value. Must be boolean. Input: " + JSON.stringify(instance));
            }
            this.actualInstance = instance;
            match++;
        } catch(err) {
            // json data failed to deserialize into Boolean
            errorMessages.push("Failed to construct Boolean: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ContainerPageProperty` with oneOf schemas Boolean, Number, Object, String, [Object]. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ContainerPageProperty` with oneOf schemas Boolean, Number, Object, String, [Object]. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ContainerPageProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerPageProperty} obj Optional instance to populate.
     * @return {module:model/ContainerPageProperty} The populated <code>ContainerPageProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ContainerPageProperty(data);
    }

    /**
     * Gets the actual instance, which can be <code>Boolean</code>, <code>Number</code>, <code>Object</code>, <code>String</code>, <code>[Object]</code>.
     * @return {(module:model/Boolean|module:model/Number|module:model/Object|module:model/String|module:model/[Object])} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>Boolean</code>, <code>Number</code>, <code>Object</code>, <code>String</code>, <code>[Object]</code>.
     * @param {(module:model/Boolean|module:model/Number|module:model/Object|module:model/String|module:model/[Object])} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ContainerPageProperty.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ContainerPageProperty from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ContainerPageProperty} An instance of ContainerPageProperty.
     */
    static fromJSON = function(json_string){
        return ContainerPageProperty.constructFromObject(JSON.parse(json_string));
    }
}


ContainerPageProperty.OneOf = ["Boolean", "Number", "Object", "String", "[Object]"];

export default ContainerPageProperty;

