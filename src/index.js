/**
 * Flyo Nitro CMS
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-beta.128
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Block from './model/Block';
import BlockSlots from './model/BlockSlots';
import ConfigResponse from './model/ConfigResponse';
import ConfigResponseNav from './model/ConfigResponseNav';
import ConfigResponseNitro from './model/ConfigResponseNitro';
import ContainerPageProperty from './model/ContainerPageProperty';
import Content from './model/Content';
import EntityResponse from './model/EntityResponse';
import EntityResponseEntity from './model/EntityResponseEntity';
import EntityResponseEntityEntityMetric from './model/EntityResponseEntityEntityMetric';
import Meta from './model/Meta';
import Page from './model/Page';
import PageProperty from './model/PageProperty';
import PagePropertyValue from './model/PagePropertyValue';
import PagesInner from './model/PagesInner';
import SitemapResponseInner from './model/SitemapResponseInner';
import ConfigApi from './api/ConfigApi';
import ContentApi from './api/ContentApi';
import EntitiesApi from './api/EntitiesApi';
import PagesApi from './api/PagesApi';
import SearchApi from './api/SearchApi';
import SitemapApi from './api/SitemapApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Nitrocms = require('index'); // See note below*.
* var xxxSvc = new Nitrocms.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Nitrocms.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Nitrocms.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Nitrocms.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0-beta.128
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Block model constructor.
     * @property {module:model/Block}
     */
    Block,

    /**
     * The BlockSlots model constructor.
     * @property {module:model/BlockSlots}
     */
    BlockSlots,

    /**
     * The ConfigResponse model constructor.
     * @property {module:model/ConfigResponse}
     */
    ConfigResponse,

    /**
     * The ConfigResponseNav model constructor.
     * @property {module:model/ConfigResponseNav}
     */
    ConfigResponseNav,

    /**
     * The ConfigResponseNitro model constructor.
     * @property {module:model/ConfigResponseNitro}
     */
    ConfigResponseNitro,

    /**
     * The ContainerPageProperty model constructor.
     * @property {module:model/ContainerPageProperty}
     */
    ContainerPageProperty,

    /**
     * The Content model constructor.
     * @property {module:model/Content}
     */
    Content,

    /**
     * The EntityResponse model constructor.
     * @property {module:model/EntityResponse}
     */
    EntityResponse,

    /**
     * The EntityResponseEntity model constructor.
     * @property {module:model/EntityResponseEntity}
     */
    EntityResponseEntity,

    /**
     * The EntityResponseEntityEntityMetric model constructor.
     * @property {module:model/EntityResponseEntityEntityMetric}
     */
    EntityResponseEntityEntityMetric,

    /**
     * The Meta model constructor.
     * @property {module:model/Meta}
     */
    Meta,

    /**
     * The Page model constructor.
     * @property {module:model/Page}
     */
    Page,

    /**
     * The PageProperty model constructor.
     * @property {module:model/PageProperty}
     */
    PageProperty,

    /**
     * The PagePropertyValue model constructor.
     * @property {module:model/PagePropertyValue}
     */
    PagePropertyValue,

    /**
     * The PagesInner model constructor.
     * @property {module:model/PagesInner}
     */
    PagesInner,

    /**
     * The SitemapResponseInner model constructor.
     * @property {module:model/SitemapResponseInner}
     */
    SitemapResponseInner,

    /**
    * The ConfigApi service constructor.
    * @property {module:api/ConfigApi}
    */
    ConfigApi,

    /**
    * The ContentApi service constructor.
    * @property {module:api/ContentApi}
    */
    ContentApi,

    /**
    * The EntitiesApi service constructor.
    * @property {module:api/EntitiesApi}
    */
    EntitiesApi,

    /**
    * The PagesApi service constructor.
    * @property {module:api/PagesApi}
    */
    PagesApi,

    /**
    * The SearchApi service constructor.
    * @property {module:api/SearchApi}
    */
    SearchApi,

    /**
    * The SitemapApi service constructor.
    * @property {module:api/SitemapApi}
    */
    SitemapApi
};
